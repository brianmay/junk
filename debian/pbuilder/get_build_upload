#!/usr/bin/perl -w
# (c) 2003 Brian May
#
# This package is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 dated June, 1991.
#
# This package is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this package; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
#

use strict;
use FileHandle;
use AppConfig;
use Getopt::Long;
use Pod::Usage;
use Proc::WaitStat qw(waitstat_die close_die);
use AptPkg::Config '$_config';
use AptPkg::System '$_system';
use AptPkg::Version;

$_config->init;
$_system = $_config->system;
my $vs = $_system->versioning;

my $sa = 0;
my $man = 0;
my $help = 0;
my $changelog = 0;
my $distribution = undef;
my $version = undef;
my $key = undef;
my $upload = undef;
my $shell = 0;
GetOptions('help|?' => \$help, man => \$man,
                sa => \$sa, changelog => \$changelog,
                "distribution=s" => \$distribution,
                "version=s" => \$version,
                "key=s" => \$key, "upload=s" => \$upload,
                shell => \$shell) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if (!defined($distribution)) {
        die "Must provide a distribution to rebuild for";
}

if (!defined($version)) {
        $version = "%v.$distribution.1";
}

sub build
{
        my $control;
        my (@packages, $src_pkg, $upversionchdir, $debversion);
        my ($pkg) = @_;
        print "-----> Building $pkg <-----\n";
        open(APTSOURCE,"apt-get -y --print-uris source $pkg |");
        while(<APTSOURCE>)
        {
                if(/^\'(http|ftp|file):/)
                {
            @packages = split / /;
            if($packages[1] =~ /^(.*)_(.*)(-.*)\.dsc$/) { $src_pkg = $1; $upversionchdir = $2; $debversion = $3; }
            elsif($packages[1] =~ /^(.*)_(.*)\.dsc$/) { $src_pkg = $1; $upversionchdir = $2; $debversion = ""; }
                }
        }
        close_die(APTSOURCE,"apt-get -y --print-uris source $pkg");

        my $rc;
        $rc=system("sudo","rm","-rf","$src_pkg-$upversionchdir");
        waitstat_die($rc,"rm -rf $src_pkg-$upversionchdir");

        $rc=system("apt-get","-y","source","$pkg");
        waitstat_die($rc,"apt-get -y source $pkg");

        chdir("$src_pkg-$upversionchdir") or die "Unable to chdir to $src_pkg-$upversionchdir: $!\n";

        # Get real version, including epoch
        open(VERSION,"dpkg-parsechangelog  | sed -n 's/Version: //p' |");
        my $theversion=<VERSION>;
        my $upstream = $vs->upstream($theversion);
        chomp($theversion);
        close_die(VERSION,"dpkg-parsechangelog  | sed -n 's/Version: //p'");

        $version =~ s/%v/$theversion/;
        $version =~ s/%u/$upstream/;

        # Add an entry in changelog
        $rc=system("chmod","u+w","debian/changelog");
        waitstat_die($rc,"chmod u+w debian/changelog");

        $rc=system("debchange","-p","-v$version","Rebuild for $distribution.");
        waitstat_die($rc,"debchange -p -v$version \"Rebuild for $distribution.\"");

        if ($changelog) {
                # Review changelog
                $rc=system("less","debian/changelog");
                waitstat_die($rc,"less debian/changelog");
        }

        if ($shell) {
                print "Entering shell, type exit to continue building.\n";
                $rc=system("zsh");
                waitstat_die($rc,"zsh");
        }

        my @ARGS = ();
        if ($sa) {
                push(@ARGS,"--sa");
        }

        if (defined($distribution)) {
                push(@ARGS,"--distribution",$distribution);
        }

        if (defined($key)) {
                push(@ARGS,"--key",$key);
        }

        # Now build
        $rc=system("pbuilder-local","--build",@ARGS);
        waitstat_die($rc,"pbuilder-local --build ".join(" ",@ARGS));


        if (defined($upload)) {
                $rc=system("debrelease","--dput",$upload);
                waitstat_die($rc,"debrelease --dput $upload");
        }

        return 1;
}

while ($ARGV[0]) {
  build($ARGV[0]) or die "build failed\n";
  shift;
}

__END__

=head1 NAME

woody_get_build_upload - Get unstable package, build it, and upload it

=head1 SYNOPSIS

woody_get_build_upload [options] [package...]

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=item B<-sa>

Use -sa option to dpkg-buildpackage

=item B<-changelog>

Display changelog after updating it.

=item B<-shell>

Execute shell after updating changelog.

=item B<-distribution=s>

Override the distribution.

=item B<-version=s>

Change the version used. %v is replaced with the version used and %u is
replaced with the upstream version. The default is %v.$distribution.1

=item B<-key=s>

Sign with a non-default key.

=item B<-upload=s>

Upload the file to given location.

=back

=head1 DESCRIPTION

B<This program> will do stuff and exit.

=cut
